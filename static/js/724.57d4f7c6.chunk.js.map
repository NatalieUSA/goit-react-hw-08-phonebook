{"version":3,"file":"static/js/724.57d4f7c6.chunk.js","mappings":"uQAwBA,EAxBe,CACbA,KAAM,CACJC,KAAM,OACND,KAAM,OACNE,UAAU,EACVC,MAAO,YACPC,YAAa,aAEfC,MAAO,CACLJ,KAAM,QACND,KAAM,QACNE,UAAU,EACVC,MAAO,aACPC,YAAa,cAEfE,SAAU,CACRL,KAAM,WACND,KAAM,WACNE,UAAU,EACVC,MAAO,gBACPC,YAAa,kBCdjB,EANqB,CACnBJ,KAAM,GACNK,MAAO,GACPC,SAAU,ICFZ,GAAiB,E,SC8BjB,EArBqB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtB,GAA8CC,EAAAA,EAAAA,GAAQ,CACpDC,aAAAA,EACAF,SAAAA,IAFMG,EAAR,EAAQA,MAAOC,EAAf,EAAeA,aAAcC,EAA7B,EAA6BA,aAIrBZ,EAA0BU,EAA1BV,KAAMK,EAAoBK,EAApBL,MAAOC,EAAaI,EAAbJ,SAErB,OACE,kBAAMC,SAAUK,EAAcC,UAAWC,EAAAA,KAAzC,WACE,SAACC,EAAA,GAAD,QAAWC,MAAOhB,EAAMW,aAAcA,GAAkBM,EAAAA,QACxD,SAACF,EAAA,GAAD,QAAWC,MAAOX,EAAOM,aAAcA,GAAkBM,EAAAA,SACzD,SAACF,EAAA,GAAD,QACEC,MAAOV,EACPK,aAAcA,GACVM,EAAAA,YAEN,SAAC,IAAD,yBAGL,ECVD,EAbqB,WACnB,IAAMC,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,GACtBC,GAAWC,EAAAA,EAAAA,MAKjB,OAAIJ,GACK,SAAC,KAAD,CAAUK,GAAG,eAGf,SAAC,EAAD,CAAchB,SARA,SAAAiB,GACnBH,GAASI,EAAAA,EAAAA,IAASD,GACnB,GAOF,C,mECMD,IAtBgB,SAAC,GAAgC,IAA9Bf,EAA6B,EAA7BA,aAAcF,EAAe,EAAfA,SAC/B,GAA0BmB,EAAAA,EAAAA,WAAS,UAAKjB,IAAxC,eAAOC,EAAP,KAAciB,EAAd,KAEMhB,GAAeiB,EAAAA,EAAAA,cACnB,YAAiB,IAAdC,EAAa,EAAbA,OACO7B,EAAgB6B,EAAhB7B,KAAMgB,EAAUa,EAAVb,MACdW,GAAS,SAAAG,GACP,OAAO,kBAAKA,GAAZ,cAAwB9B,EAAOgB,GAChC,GACF,GACD,CAACW,IASH,MAAO,CAAEjB,MAAAA,EAAOiB,SAAAA,EAAUhB,aAAAA,EAAcC,aANnB,SAAAmB,GACnBA,EAAEC,iBACFzB,GAAS,UAAKG,IACdiB,GAAS,UAAKlB,GACf,EAGF,C,kGCrBD,EAA0B,4BAA1B,EAA8D,0B,oCCoB9D,EAhBkB,SAAC,GAAuC,IAArCN,EAAoC,EAApCA,MAAOQ,EAA6B,EAA7BA,aAAiBsB,GAAY,YACjDC,GAAKC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAEnC,OACE,iBAAKvB,UAAWC,EAAhB,WACE,kBAAOuB,QAASH,EAAhB,SAAqB/B,KACrB,0BACEU,UAAWC,EACXoB,GAAIA,EACJI,SAAU3B,GACNsB,MAIX,C","sources":["components/RegisterForm/fields.js","components/RegisterForm/InitialState.js","components/RegisterForm/register-form.module.css","components/RegisterForm/RegisterForm.jsx","Pages/RegisterPage.jsx","shared/Hooks/useForm.js","webpack://react-homework-template/./src/shared/TextField/text-field.module.css?f539","shared/TextField/TextField.jsx"],"sourcesContent":["const fields = {\n  name: {\n    type: 'text',\n    name: 'name',\n    required: true,\n    label: 'User name',\n    placeholder: 'User name',\n  },\n  email: {\n    type: 'email',\n    name: 'email',\n    required: true,\n    label: 'User email',\n    placeholder: 'User email',\n  },\n  password: {\n    type: 'password',\n    name: 'password',\n    required: true,\n    label: 'User password',\n    placeholder: 'User password',\n  },\n};\n\nexport default fields;\n","const initialState = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nexport default initialState;\n","// extracted by mini-css-extract-plugin\nexport default {};","import TextField from 'shared/TextField/TextField';\nimport Button from 'shared/ButtonForm/ButtonForm';\n\nimport useForm from 'shared/Hooks/useForm';\n\nimport fields from './fields';\nimport initialState from './InitialState';\n\nimport styles from './register-form.module.css';\n\nconst RegisterForm = ({ onSubmit }) => {\n  const { state, handleChange, handleSubmit } = useForm({\n    initialState,\n    onSubmit,\n  });\n  const { name, email, password } = state;\n\n  return (\n    <form onSubmit={handleSubmit} className={styles.form}>\n      <TextField value={name} handleChange={handleChange} {...fields.name} />\n      <TextField value={email} handleChange={handleChange} {...fields.email} />\n      <TextField\n        value={password}\n        handleChange={handleChange}\n        {...fields.password}\n      />\n      <Button>Register</Button>\n    </form>\n  );\n};\n\nexport default RegisterForm;\n\n// import initialState from './InitialState';\n\n// import useForm from 'shared/Hooks/useForm';\n\n// import { Button, Form, Input } from 'antd';\n// const onFinish = values => {\n//   console.log('Success:', values);\n// };\n// const onFinishFailed = errorInfo => {\n//   console.log('Failed:', errorInfo);\n// };\n\n// const RegisterForm = ({ onSubmit }) => {\n//   const { state, handleChange, handleSubmit } = useForm({\n//     initialState,\n//     onSubmit,\n//   });\n//   const { name, email, password } = state;\n\n//   return (\n//     <Form\n//       onSubmit={handleSubmit}\n//       name=\"basic\"\n//       labelCol={{\n//         span: 8,\n//       }}\n//       wrapperCol={{\n//         span: 16,\n//       }}\n//       style={{\n//         maxWidth: 600,\n//       }}\n//       initialValues={{\n//         remember: true,\n//       }}\n//       onFinish={onFinish}\n//       onFinishFailed={onFinishFailed}\n//       autoComplete=\"off\"\n//     >\n//       <Form.Item\n//         label=\"Username\"\n//         name=\"username\"\n//         rules={[\n//           {\n//             required: true,\n//             message: 'Please input your username!',\n//           },\n//         ]}\n//       >\n//         <Input value={name} handlechange=\"handleChange\" />\n//       </Form.Item>\n\n//       <Form.Item\n//         name={['user', 'email']}\n//         label=\"Email\"\n//         rules={[\n//           {\n//             required: true,\n//             message: 'Please input your email!',\n//             type: 'email',\n//           },\n//         ]}\n//       >\n//         <Input value={email} handlechange=\"handleChange\" />\n//       </Form.Item>\n\n//       <Form.Item\n//         label=\"Password\"\n//         name=\"password\"\n//         rules={[\n//           {\n//             required: true,\n//             message: 'Please input your password!',\n//           },\n//         ]}\n//       >\n//         <Input.Password value={password} handlechange=\"handleChange\" />\n//       </Form.Item>\n\n//       <Form.Item\n//         name=\"remember\"\n//         valuePropName=\"checked\"\n//         wrapperCol={{\n//           offset: 8,\n//           span: 16,\n//         }}\n//       ></Form.Item>\n\n//       <Form.Item\n//         wrapperCol={{\n//           offset: 8,\n//           span: 16,\n//         }}\n//       >\n//         <Button type=\"primary\" htmlType=\"submit\">\n//           Register\n//         </Button>\n//       </Form.Item>\n//     </Form>\n//   );\n// };\n\n// export default RegisterForm;\n\n// const onFinish = values => {\n//   console.log(values);\n// };\n\n// const validateMessages = {\n//   required: '${label} is required!',\n//   types: {\n//     email: '${label} is not a valid email!',\n//     number: '${label} is not a valid number!',\n//   },\n//   number: {\n//     range: '${label} must be between ${min} and ${max}',\n//   },\n// };\n","import { useSelector, useDispatch } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { register } from 'redux/auth/AuthOperations';\nimport { isLoggedIn } from 'redux/auth/AuthSelectors';\nimport RegisterForm from 'components/RegisterForm/RegisterForm';\n\nconst RegisterPage = () => {\n  const isLogin = useSelector(isLoggedIn);\n  const dispatch = useDispatch();\n  const handleSignup = data => {\n    dispatch(register(data));\n  };\n\n  if (isLogin) {\n    return <Navigate to=\"/contacts\" />;\n  }\n\n  return <RegisterForm onSubmit={handleSignup} />;\n};\nexport default RegisterPage;\n","import { useState, useCallback } from 'react';\n\nconst useForm = ({ initialState, onSubmit }) => {\n  const [state, setState] = useState({ ...initialState });\n\n  const handleChange = useCallback(\n    ({ target }) => {\n      const { name, value } = target;\n      setState(prevState => {\n        return { ...prevState, [name]: value };\n      });\n    },\n    [setState]\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ ...state });\n    setState({ ...initialState });\n  };\n\n  return { state, setState, handleChange, handleSubmit };\n};\n\nexport default useForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"text-field_wrapper__UiQgu\",\"field\":\"text-field_field__0xPaa\"};","import { useMemo } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport styles from './text-field.module.css';\n\nconst TextField = ({ label, handleChange, ...props }) => {\n  const id = useMemo(() => nanoid(), []);\n\n  return (\n    <div className={styles.wrapper}>\n      <label htmlFor={id}>{label}</label>\n      <input\n        className={styles.field}\n        id={id}\n        onChange={handleChange}\n        {...props}\n      />\n    </div>\n  );\n};\n\nexport default TextField;\n"],"names":["name","type","required","label","placeholder","email","password","onSubmit","useForm","initialState","state","handleChange","handleSubmit","className","styles","TextField","value","fields","isLogin","useSelector","isLoggedIn","dispatch","useDispatch","to","data","register","useState","setState","useCallback","target","prevState","e","preventDefault","props","id","useMemo","nanoid","htmlFor","onChange"],"sourceRoot":""}